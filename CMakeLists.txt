cmake_minimum_required(VERSION 3.10)
if (POLICY CMP0091)
  cmake_policy(SET CMP0091 NEW)
endif()
project(myframe_pb VERSION 0.1.2)

#### cmake module
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

#### compile option
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED YES)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/source-charset:utf-8>")

#### path setting
SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
SET(MYFRAME_ROOT ${CMAKE_INSTALL_PREFIX})
SET(MYFRAME_INSTALL_LIB_DIR ${MYFRAME_ROOT}/lib)
SET(MYFRAME_INSTALL_HEADER_DIR ${MYFRAME_ROOT}/include/myframe_pb)

FIND_PACKAGE(Protobuf REQUIRED)

INCLUDE_DIRECTORIES(${Protobuf_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

### PROTO
FILE(GLOB proto_files "proto/*.proto")
PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS ${proto_files})

ADD_LIBRARY(myframe_pb SHARED ${PROTO_SRCS} ${PROTO_HDRS})
TARGET_LINK_LIBRARIES(myframe_pb
    ${Protobuf_LIBRARIES})
TARGET_INCLUDE_DIRECTORIES(myframe_pb
    PUBLIC ${CMAKE_CURRENT_BINARY_DIR})

### install
INSTALL(TARGETS
    myframe_pb
    LIBRARY DESTINATION ${MYFRAME_INSTALL_LIB_DIR}
    ARCHIVE DESTINATION ${MYFRAME_INSTALL_LIB_DIR}
    RUNTIME DESTINATION ${MYFRAME_INSTALL_LIB_DIR}
)
INSTALL(DIRECTORY proto DESTINATION ${MYFRAME_INSTALL_HEADER_DIR})
INSTALL(FILES
    ${PROTO_HDRS}
    PERMISSIONS
    OWNER_READ
    GROUP_READ
    WORLD_READ
    DESTINATION ${MYFRAME_INSTALL_HEADER_DIR}
)
